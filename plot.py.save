from pyqtgraph.Qt import QtGui, QtCore
import pyqtgraph as pg
import atexit
from numpy import arctan,sqrt
from platform import Platform
from beacon import BeaconSensor
from localization import Localizer

#QtGui.QApplication.setGraphicsSystem('raster')
app = QtGui.QApplication([])
#mw = QtGui.QMainWindow()
#mw.resize(800,800)

win = pg.GraphicsWindow(title="BeaconBot")
win.resize(1000,600)
win.setWindowTitle('BeaconBot Vizualization')

# Enable antialiasing for prettier plots
pg.setConfigOptions(antialias=True)



# Configure location plot
location_plot = win.addPlot(title="Location")
location_plot.showGrid(x=True, y=True)
location_plot.setLabel('left', 'X Position', units='cm')
location_plot.setLabel('bottom', 'Y Position', units='cm')
location_plot.setXRange(-100, 100)
location_plot.setYRange(-100, 100)

x_data = []
y_data = []

platform = Platform()
atexit.register(platform.shutdown)
robot_state = platform.getState()
localizer = Localizer()
beacon_sensor = BeaconSensor('0c:f3:ee:04:22:3d')

def on_click(event):
    point = location_plot.getViewBox().mapSceneToView(event.scenePos()).toPoint()
    x = point.x()
    y = point.y()

    my_x, my_y, my_theta = platform.getState()
    target_x, target_y = y, x
    location_plot.plot([target_y, target_y+0.01], [target_x, target_x+0.01], pen=pg.mkPen(width=9, color='g'))
    #pg.QtGui.QApplication.processEvents()
    #target_x *= -1
    #target_y *= -1
    to_turn = -1*arctan((target_y - my_y) / (target_x - my_x)) * (360/(2*3.1415))
    to_turn -= my_theta*(360/(3.1415))

    while to_turn > 180.0:
        to_turn -= 360.0
    while to_turn < -180.0:
        to_turn += 360.0

    #to_drive = sqrt((target_y-my_y)**2+(target_x-my_x)**2)
    to_drive = 0

    #print "target=(%f, %f), turn=%f, heading=%f drive:=%f" % (target_x, target_y, to_turn, my_theta, to_drive)

    platform.turn(to_turn)
    platform.drive_straight(to_drive) 

    new_heading = platform.getState()[2] * (360 / (2*3.1415))

    print "target=(%f, %f), turned=%f, old_heading=%f new_heading=%f drive:=%f" % (target_x, target_y, to_turn, my_theta, new_heading, to_drive)


win.scene().sigMouseClicked.connect(on_click)


while True:
    def _update_graph():
        robot_state = platform.getState() 
        y_data.append(robot_state[0])
        x_data.append(-1*robot_state[1])
        location_plot.plot(x_data, y_data, pen=pg.mkPen(width=4.5, color='r'))
        pg.QtGui.QApplication.processEvents()
    def sense():
        _update_graph()
        beacon_sensor.scan(0.01)
        localizer.update((platform.getState()[:2], beacon_sensor.getDistance()))

    _update_graph()

    #sense()

    #my_x, my_y, my_theta = platform.getState()
    #target_x, target_y = localizer.target_location()
    #location_plot.plot([target_x, target_x+0.01], [target_y, target_y+0.01], pen=pg.mkPen(width=9, color='g'))
    #pg.QtGui.QApplication.processEvents()
    #target_x *= -1
    #target_y *= -1
    #to_turn = -1*arctan((target_y - my_y) / (target_x - my_x)) * (360/(2*3.1415))
    #to_turn -= my_theta*360/(2.0*3.1415)

    #while to_turn > 180.0:
    #    to_turn -= 360.0
    #while to_turn < -180.0:
    #    to_turn += 360.0

    #to_drive = sqrt((target_y-my_y)**2+(target_x-my_x)**2)
    #to_drive = 2

    #print "target=(%f, %f), turn=%f, drive:=%f" % (target_x, target_y, to_turn, to_drive)

    #platform.turn(-1*to_turn)
    #platform.drive_straight(to_drive) 

    #location_plot.plot([target_x, target_x+0.01], [target_y, target_y+0.01], pen=pg.mkPen(width=9, color='g'))
    #pg.QtGui.QApplication.processEvents()
 

    #platform.shutdown()


if __name__ == '__main__':
    import sys
    atexit.register(platform.shutdown)
    if (sys.flags.interactive != 1) or not hasattr(QtCore, 'PYQT_VERSION'):
        QtGui.QApplication.instance().exec_()
