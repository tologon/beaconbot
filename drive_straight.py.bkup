from WheelEncoder import WheelEncoder
from Adafruit_MotorHAT import *
from PID import PID
from custom_motors import *
import atexit
import time

motor_hat = Adafruit_MotorHAT(addr=0x60)

def turnOffMotors():
    # diable 4 motors
    for motor in range(1, 5):
        motor_hat.getMotor(motor).run(Adafruit_MotorHAT.RELEASE)

atexit.register(turnOffMotors)

if __name__ == '__main__':
    left_motor  = motor_hat.getMotor(2)
    right_motor = motor_hat.getMotor(1)

    initial_power = 100
    master_power = initial_power + 3  # left encoder
    slave_power  = initial_power - 5   # right encoder

    error = 0
    # Constant of Proportionality
    # needs tuning (until the value is just right)
    kp = 4
	# kp: 0.010000, results: -0.263333
	# kp: 0.050000, results: -0.216667
	# kp: 0.008000, results: -0.250000
	# kp: 0.025000, results: -0.296667
	# kp: 0.100000, results: -0.230000
	# kp: 0.200000, results: -0.236667
	# kp: 0.500000, results: -0.083333
	# kp: 1.000000, results: -0.043333
	# kp: 4.000000, results: -0.013333
	# kp: 10.000000, results: -0.010000

    left_encoder = WheelEncoder(20, 20, 1.75) # 3.25
    right_encoder = WheelEncoder(21, 20, 1.75)

    motors = Motors(right_motor, right_encoder, left_motor, left_encoder)

    sum_error = 0
    total = 150.0
    time_delay = 0.25
    onetick_power_change = 4
    distance_travelled = 0
    distance_to_travel = 100 # cm
	
    while distance_travelled < distance_to_travel: #for i in range(int(total)):
#	print "error: %f = (%f - %f)" % (error, left_encoder.getTicks(), right_encoder.getTicks())

        signed_error = (left_encoder.getTicks() - right_encoder.getTicks()) * onetick_power_change
	error += signed_error
	
	master_power -= signed_error / 2.0
 	slave_power += signed_error / 2.0	

	motors._set_power_directional(LEFT, int(master_power))
        motors._set_power_directional(RIGHT, int(slave_power))
#	print "master power: %f, slave power: %f" % (master_power, slave_power)
	
	print "l: %3.0f r: %3.0f lt: %2.0f rt: %2.0f d: %2.0f dst: %3.0fcm?" % (master_power, slave_power, left_encoder.getTicks(), right_encoder.getTicks(), signed_error, distance_travelled)
	
	distance_travelled += (left_encoder.getCurrentDistance() + right_encoder.getCurrentDistance()) / 2.0
	
        left_encoder.resetTicks()
	right_encoder.resetTicks()

	time.sleep(time_delay)

    print "kp: %f, results: %f" % (kp, sum_error/total)
